#!/usr/bin/env python3
"""
Example: Real Pentesting Scenario with Multi-Terminal Execution
This demonstrates how to run multiple pentesting tools simultaneously
"""

import time
import json
from command_executor import execute_command
from config import print_colored, Colors
from wordlist_manager import get_wordlist_for_tool

def pentesting_parallel_example():
    """Example of parallel pentesting execution"""
    target = "testphp.vulnweb.com"  # Safe testing target
    
    print_colored("üéØ Parallel Pentesting Example", Colors.CYAN, bold=True)
    print_colored(f"Target: {target}", Colors.YELLOW)
    print()
    
    # Phase 1: Reconnaissance - Run multiple scans in parallel
    print_colored("üîç Phase 1: Parallel Reconnaissance", Colors.YELLOW, bold=True)
    
    recon_commands = [
        f"nmap -sS -T4 -p 1-1000 {target}",  # Port scan
        f"nmap -sV -sC -p 80,443 {target}",   # Service detection
        f"dig {target} ANY",                   # DNS enumeration
        f"whois {target}",                     # WHOIS lookup
    ]
    
    # Execute parallel reconnaissance
    parallel_recon = f"parallel_execute:{';'.join(recon_commands)}"
    
    print_colored("Launching parallel reconnaissance...", Colors.CYAN)
    result, code, error = execute_command(
        command=parallel_recon,
        phase="reconnaissance",
        tool_category="network_scanning",
        expected_outcome="Network and service discovery"
    )
    
    print("Reconnaissance launch result:")
    print(result)
    
    # Extract task IDs and collect results
    try:
        result_data = json.loads(result)
        recon_task_ids = result_data.get("task_ids", [])
        
        if recon_task_ids:
            print_colored(f"\n‚è≥ Waiting for {len(recon_task_ids)} reconnaissance tasks...", Colors.CYAN)
            
            # Collect reconnaissance results
            collect_cmd = f"collect_results:{','.join(recon_task_ids)}"
            collect_result, collect_code, collect_error = execute_command(
                command=collect_cmd,
                phase="reconnaissance",
                tool_category="network_scanning",
                expected_outcome="Reconnaissance analysis"
            )
            
            print_colored("üìä Reconnaissance Results:", Colors.GREEN, bold=True)
            print(collect_result)
        
    except json.JSONDecodeError:
        print_colored("‚ùå Could not parse reconnaissance result", Colors.RED)
    
    print("\n" + "="*60 + "\n")
    
    # Phase 2: Web Application Testing - Another set of parallel scans
    print_colored("üåê Phase 2: Parallel Web Application Testing", Colors.YELLOW, bold=True)
    
    web_commands = [
        f"nikto -h http://{target}",           # Web vulnerability scan
        f"gobuster dir -u http://{target} -w {get_wordlist_for_tool('gobuster', 'directory')} -x php,html,txt",  # Directory brute force
        f"curl -I http://{target}",           # HTTP headers
        f"whatweb http://{target}",           # Web technology detection
    ]
    
    parallel_web = f"parallel_execute:{';'.join(web_commands)}"
    
    print_colored("Launching parallel web application testing...", Colors.CYAN)
    web_result, web_code, web_error = execute_command(
        command=parallel_web,
        phase="web_testing",
        tool_category="web_application",
        expected_outcome="Web application vulnerability assessment"
    )
    
    print("Web testing launch result:")
    print(web_result)
    
    # Process web testing results
    try:
        web_result_data = json.loads(web_result)
        web_task_ids = web_result_data.get("task_ids", [])
        
        if web_task_ids:
            print_colored(f"\n‚è≥ Waiting for {len(web_task_ids)} web testing tasks...", Colors.CYAN)
            
            # Collect web testing results
            web_collect_cmd = f"collect_results:{','.join(web_task_ids)}"
            web_collect_result, web_collect_code, web_collect_error = execute_command(
                command=web_collect_cmd,
                phase="web_testing",
                tool_category="web_application", 
                expected_outcome="Web application analysis"
            )
            
            print_colored("üåê Web Testing Results:", Colors.GREEN, bold=True)
            print(web_collect_result)
        
    except json.JSONDecodeError:
        print_colored("‚ùå Could not parse web testing result", Colors.RED)
    
    print("\n" + "="*60 + "\n")
    
    # Phase 3: Single detailed scan in new terminal
    print_colored("üîç Phase 3: Detailed Single Scan", Colors.YELLOW, bold=True)
    
    detailed_scan = f"nmap -sC -sV -A -O {target}"
    print_colored("Launching detailed scan in new terminal...", Colors.CYAN)
    
    detailed_result, detailed_code, detailed_error = execute_command(
        command=detailed_scan,
        phase="detailed_scanning",
        tool_category="network_scanning",
        expected_outcome="Comprehensive target analysis",
        run_in_terminal=True
    )
    
    print_colored("üéØ Detailed Scan Results:", Colors.GREEN, bold=True)
    print(detailed_result)
    
    print()
    print_colored("‚úÖ Parallel Pentesting Example Complete!", Colors.GREEN, bold=True)
    print_colored("üìã Summary:", Colors.CYAN, bold=True)
    print("- Reconnaissance: Multiple network scans ran in parallel")
    print("- Web Testing: Multiple web tools executed simultaneously") 
    print("- Detailed Scan: Comprehensive scan in dedicated terminal")
    print("- All results collected and analyzed automatically")

if __name__ == "__main__":
    pentesting_parallel_example()
